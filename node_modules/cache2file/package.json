{
  "name": "cache2file",
  "description": "Cache string information to files",
  "version": "0.2.1",
  "author": {
    "name": "Peter Galiba",
    "email": "poetro@poetro.hu",
    "url": "http://poetro.hu/"
  },
  "keywords": [
    "cache",
    "file"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/Poetro/node-cache2file.git"
  },
  "homepage": "http://github.com/Poetro/node-cache2file",
  "main": "lib/cache2file.js",
  "dependencies": {
    "funk": ">=1.0.0"
  },
  "engines": {
    "node": ">= 0.2.0"
  },
  "readme": "#Cache to File module for Node.js\n\nIt stores cache data in files that can expire. Stored data can be in any format\n`Buffer` supports (`utf8` [default], `ascii`, `binary`).\n\n#Install\n\n    npm install cache2file\n\n#Usage\n\n    var Cache2File = require('cache2file'),\n        // Path to store the cache files\n        cachePath = './cache',\n        // Timeout in milliseconds\n        timeout = 60000,\n        // Generate a new cache\n        cache = new Cache2File(cachePath, timeout);\n\n    cache.set('cacheKey', doIntensiveStuff());\n\n    // ... some time later\n    cache.get('cacheKey', function (err, data) {\n      if (!err) {\n        // We have the data, do whatever we want.\n      }\n      else {\n        // Cache timed out, or removed, so store it again.\n        data = doIntensiveStuff();\n        cache.set('cacheKey', data);\n      }\n\n      processData(data);\n    });\n\n    // Remove cached data.\n    cache.remove('cacheKey');\n\nCache2File uses it's own function `Cache2File.generateKey` to generate a hash\nfor the filename to store data in. It can be replaced with your own filename\ngenerating algorithm if you wish. Hashing was generally required to only have\nascii characters in filenames and no `/` characters, as there is no restriction\nfor the characters in the `key`.\n\n`key`'s string value should be less then 200 characters so the filesystem can\nhandle the filename.\n\nTo remove multiple cache files, use\n    cache.removeAll(callback, keyCached, expired)\n\nWhere if `keyCached` is set to `true`, remove those whose key was touched in the\nlifetime of the cache object. If it is `false` (default) all cache files in the\ncache directory will be removed (those that has the extension `.cache`).<br>\nIf `expired` is set to `true` (default is `false`) it will only remove expired\ncache files.<br>\nThese filters can be combined.\n\n## TODO\nHandle cache read / write concurrency.",
  "_id": "cache2file@0.2.1",
  "dist": {
    "shasum": "45c33f8a062fd049d65a5b1181a28314a17c8c34"
  },
  "_from": "cache2file"
}
