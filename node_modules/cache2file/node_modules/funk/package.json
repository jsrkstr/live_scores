{
  "name": "funk",
  "description": "Asynchronous functions made funky!",
  "version": "1.5.1",
  "main": "./lib/funk",
  "author": {
    "name": "Pau Ramon",
    "email": "masylum@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/masylum/funk.git"
  },
  "devDependencies": {
    "testosterone": "1.2.0"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "     ,dPYb,                           ,dPYb,\n     IP'`Yb                           IP'`Yb\n     I8  8I                           I8  8I\n     I8  8'                           I8  8bgg,\n     I8 dP  gg      gg   ,ggg,,ggg,   I8 dP\" \"8\n     I8dP   I8      8I  ,8\" \"8P\" \"8,  I8d8bggP\"\n     I8P    I8,    ,8I  I8   8I   8I  I8P' \"Yb,\n    ,d8b,_ ,d8b,  ,d8b,,dP   8I   Yb,,d8    `Yb,\n    PI8\"8888P'\"Y88P\"`Y88P'   8I   `Y888P      Y8\n     I8 `8,\n     I8  `8,\n     I8   8I\n     I8   8I\n     I8, ,8'\n      \"Y8P'\n\n\nAsynchronous functions made funky!\n\n## What the funk?\n\nFunk is a little module that helps you with the `serial` and `parallel` asynchronous pattern.\n\n## Instalation\n\n``` bash\nnpm install funk\n```\n\n## API\n\n**funk** usage is really simple. You don't need to learn any DSL or weird hacks,\njust wrap your callbacks and let the groove do the rest.\n\n### Constructor (pattern) -> Funk\n\nAccepts a string that can be either `parallel` or `serial`, depending on the pattern you want to implement.\n\n``` javascript\nvar funk = require('funk')('serial');\n```\n\n### set (name, value) -> undefined\n\nSave results that will then be recovered on the `run` callback.\n\n``` javascript\nvar funk = require('funk')('serial');\n\nsetTimeout(funk.add(function () {\n  funk.set('foo', 'bar');\n}, 100);\n\nfunk.run(function () {\n  assert.equals(this.foo, 'bar');\n});\n```\n\n### get (name) -> *\n\nRetrieve results previously saved.\n\n``` javascript\nvar funk = require('funk')('serial');\n\nsetTimeout(funk.add(function () {\n  funk.set('foo', 'bar');\n}, 100);\n\nfunk.run(function () {\n  assert.equals(funk.get('foo'), 'bar');\n});\n```\n\n### add (function) -> Function\n\nAdds a callback to be executed either in `parallel` or `serial`.\n\n``` javascript\nvar funk = require('funk')('parallel');\n\nsetTimeout(funk.add(function () {\n  funk.set('foo', 'bar');\n}, 200);\n\nsetTimeout(funk.add(function () {\n  funk.set('bar', 'foo');\n}, 100);\n\nfunk.run(function () {\n  assert.equals(funk.get('foo'), 'bar');\n  assert.equals(funk.get('bar'), 'foo');\n});\n```\n\n### nothing () -> Function\n\nAdds the callback to funk and does nothing with the result\n\n``` javascript\nvar funk = require('funk')('parallel');\n\nsetTimeout(funk.nothing());\nsetTimeout(funk.nothing());\n\nfunk.run(function () {\n  // both setTimeout are called\n});\n```\n\n### result (name, value) -> Function\n\nAdds the callback to funk and sets the value.\n\n``` javascript\nvar funk = require('funk')('parallel');\n\nfs.readFile(\"./foo.txt\", 'utf-8', funk.result('file1'));\nfs.readFile(\"./bar.txt\", 'utf-8', funk.result('file2'));\n\nfunk.run(function () {\n  assert.equal(this.file1, 'foo\\n');\n  assert.equal(this.file2, 'bar\\n');\n});\n```\n\n### result (callback, onError) -> undefined\n\nWill run all the added functions in `serial` or `parallel` and call _callback_ when all are done.\n`this` holds all the results setted with `set` and the `errors`.\n\nIf a `onError` callback is implemented it will be called only on getting the first error, ignorign the following requests.\n\n``` javascript\n// serial example without declaring `onError` callback\nvar funk = require('./../')('serial'),\n    order = 0;\n\nfunk.name = 'fleiba';\nfunk.results = [];\n\nsetTimeout(funk.add(function () {\n  order += 1;\n  funk.set('order_first', order);\n}), 200);\n\nfs.readFile(__dirname + \"/data/doo.txt\", 'utf-8', funk.add(function () {\n  order += 1;\n  funk.set('order_foo', order);\n}));\n\nfs.readFile(__dirname + \"/data/gar.txt\", 'utf-8', funk.add(function () {\n  order += 1;\n  funk.set('order_bar', order);\n}));\n\nfunk.run(function () {\n  assert.equal(this.order_first, 1);\n  assert.equal(this.order_foo, 2);\n  assert.equal(this.order_bar, 3);\n  assert.equal(this.errors.length, 2); // none of the 2 files exists\n  done();\n});\n```\n\n## Tests\n\n_funk_ is fully tested using [testosterone](https://github.com/masylum/testosterone).\n\nIn order to run the tests type:\n\n``` bash\nmake\n```\n",
  "_id": "funk@1.5.1",
  "dist": {
    "shasum": "905900a13f6024c4fc31ab78a1bab93dccaff847"
  },
  "_from": "funk@>=1.0.0"
}
